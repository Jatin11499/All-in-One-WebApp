const facts = require("./facts.js")

module.exports.get = (options) => {
    if (isEmpty(options)) options = {};
    conf = {
        category : options.category || "all",
        maxLength : options.maxLength || 0,
        maxDLength : options.maxDescLength || 0,
        useDesc: options.useDesc || 0,
        safe : options.safeOutput || false
    }
    obj = {};
    
    if (conf.category == "all") { // if all category go to every category and add every fact from each
        for (var cat in facts) {
            for (var i in facts[cat]) {
                obj[facts[cat][i].title] = facts[cat][i].desc;
            }
        }
    } else { // otherwise see if category exists then get facts from it
        if (!facts[conf.category]) return { type: "error", msg: "Category not found." };
        for (var i in facts[conf.category]) {
            obj[facts[conf.category][i].title] = facts[conf.category][i].desc;
        }
    }
    
    //try {
        return getFact(obj, conf);
    //} catch (e) {
    //    return { type: "error", msg: `Please send this error to the author:\n${e}` };
    //}
}

var getFact = (obj, conf) => {
    var keys = [];
    for (var prop in obj) {
        if (obj.hasOwnProperty(prop))
            keys.push(prop);
    }

    let key = keys[keys.length * Math.random() << 0];
    
    isFactOverMax = (key.length > conf.maxLength && conf.maxLength !== 0) || (obj[key] && obj[key].length > conf.maxDLength && conf.maxDLength !== 0);
    descIsNull = (conf.useDesc == 2 && !obj[key]);
    // The above is just to clean up the code instead of a giant if statement

    paramsTooTight = true;
    for (var i in keys) {
        k = keys[i];
        if ((k.length < conf.maxLength && conf.maxLength !== 0) || (!obj[k] || (obj[k].length < conf.maxDLength && conf.maxDLength !== 0)))
            paramsTooTight = false;
    }
    if (paramsTooTight) return { type: "error", msg: "Couldn't find a fact using those parameters, try loosening them up a bit." };

    while (isFactOverMax || descIsNull) { // If any are true try getting a new fact
        key = keys[keys.length * Math.random() << 0];
        isFactOverMax = (key.length > conf.maxLength && conf.maxLength !== 0) || (obj[key] && obj[key].length > conf.maxDLength && conf.maxDLength !== 0);
        descIsNull = (conf.useDesc == 2 && !obj[key]);
    }

    out = { type: "success", fact: key };
    if (obj[key] && conf.useDesc !== 1) out.desc = obj[key];
    return out;
}

function isEmpty(obj) {
    for(var prop in obj) {
        if(obj.hasOwnProperty(prop))
            return false;
    }
    return true;
}